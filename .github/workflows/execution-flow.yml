name: Website Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # En vez de hacer caché de este directorio global
          # path: ~/.npm
          # podemos hacer que vaya includo más rápido haciendo caché del directorio node_modules local
          # que contiene todas las dependencias de este proyecto instaladas.
          # Ahora podemos omitir el step Install dependencies si pudimos usar la caché
          # Para eso usamos una condición if en el step Install dependencies
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        # Si no hemos sido capaces de usar la caché entonces instalamos manualmente de nuevo las
        # dependencias
        # Este if lo pasamos a todos los steps
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test code
        # id para ser referenciado en el step Upload test report
        id: run-tests
        run: npm run test
        # Generando un informe de test. Ver también el documento vite.config.js
        # Estamos interesados en que se genere este informe si los test fallan.
        # Se añade una condición if: seguida de una expresión (para el if, como caso especial
        # no es necesario encerrar la expresión entre ${{ }}, aunque se puede )
        # Hay que referenciar el step Test code para saber si funcionó o falló. Para eso se usa
        # el context steps, el id y la propiedad outcome y se compara con el text 'failure'
        # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
        # https://docs.github.com/en/actions/learn-github-actions/expressions#operators
        #
        # Pero vemos que no se ejecuta este step cuando falla el step Test code y eso es porque
        # GiHub Actions sigue con su comportamiento por defecto por el cual para de ejecutar los
        # pasos y los jobs (que tienen needs) cuando un step o job falla.
        # Para cambiar ese comportamiento por defecto hay que ejecutar una función especial en la condición
        # if, la función failure() combinada con el operador && y la expresión con lo que queremos que falle
        # para ejecutar este step.
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."
  # if también está disponible a nivel job
  # Aquí queremos ejecutar este job sólo si otro job falló
  # Pero para que funcione tenemos que añadir la key needs. Con esto GitHub Actions retrasará la ejecución
  # hasta que esos trabajos hayan finalizado y failure() tendrá en cuenta no solo esos jobs, sino toda la
  # cadena de esos jobs que pertenecen a esos jobs (sus needs)
  report:
    needs: [lint, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ toJSON(github) }}"
